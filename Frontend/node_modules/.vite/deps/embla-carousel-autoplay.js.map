{
  "version": 3,
  "sources": ["../../embla-carousel-autoplay/src/components/Options.ts", "../../embla-carousel-autoplay/src/components/Autoplay.ts"],
  "sourcesContent": ["import { CreateOptionsType } from 'embla-carousel/components/Options'\n\nexport type OptionsType = CreateOptionsType<{\n  delay: number\n  jump: boolean\n  playOnInit: boolean\n  stopOnFocusIn: boolean\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  stopOnLastSnap: boolean\n  rootNode: ((emblaRoot: HTMLElement) => HTMLElement | null) | null\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n}\n", "import { OptionsType, defaultOptions } from './Options'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport { OptionsHandlerType } from 'embla-carousel/components/OptionsHandler'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    autoplay?: AutoplayType\n  }\n}\n\ndeclare module 'embla-carousel/components/EventHandler' {\n  interface EmblaEventListType {\n    autoplayPlay: 'autoplay:play'\n    autoplayStop: 'autoplay:stop'\n  }\n}\n\nexport type AutoplayType = CreatePluginType<\n  {\n    play: (jump?: boolean) => void\n    stop: () => void\n    reset: () => void\n    isPlaying: () => boolean\n  },\n  OptionsType\n>\n\nexport type AutoplayOptionsType = AutoplayType['options']\n\nfunction Autoplay(userOptions: AutoplayOptionsType = {}): AutoplayType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let destroyed: boolean\n  let playing = false\n  let resume = true\n  let jump = false\n  let timer = 0\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    if (emblaApi.scrollSnapList().length <= 1) return\n\n    jump = options.jump\n    destroyed = false\n\n    const { eventStore, ownerDocument } = emblaApi.internalEngine()\n    const emblaRoot = emblaApi.rootNode()\n    const root = (options.rootNode && options.rootNode(emblaRoot)) || emblaRoot\n    const container = emblaApi.containerNode()\n\n    emblaApi.on('pointerDown', stopTimer)\n\n    if (!options.stopOnInteraction) {\n      emblaApi.on('pointerUp', startTimer)\n    }\n\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', () => {\n        resume = false\n        stopTimer()\n      })\n\n      if (!options.stopOnInteraction) {\n        eventStore.add(root, 'mouseleave', () => {\n          resume = true\n          startTimer()\n        })\n      }\n    }\n\n    if (options.stopOnFocusIn) {\n      eventStore.add(container, 'focusin', stopTimer)\n\n      if (!options.stopOnInteraction) {\n        eventStore.add(container, 'focusout', startTimer)\n      }\n    }\n\n    eventStore.add(ownerDocument, 'visibilitychange', visibilityChange)\n\n    if (options.playOnInit && !documentIsHidden()) startTimer()\n  }\n\n  function destroy(): void {\n    emblaApi.off('pointerDown', stopTimer).off('pointerUp', startTimer)\n    stopTimer()\n    destroyed = true\n    playing = false\n  }\n\n  function startTimer(): void {\n    if (destroyed) return\n    if (!resume) return\n    if (!playing) emblaApi.emit('autoplay:play')\n    const { ownerWindow } = emblaApi.internalEngine()\n    ownerWindow.clearInterval(timer)\n    timer = ownerWindow.setInterval(next, options.delay)\n    playing = true\n  }\n\n  function stopTimer(): void {\n    if (destroyed) return\n    if (playing) emblaApi.emit('autoplay:stop')\n    const { ownerWindow } = emblaApi.internalEngine()\n    ownerWindow.clearInterval(timer)\n    timer = 0\n    playing = false\n  }\n\n  function visibilityChange(): void {\n    if (documentIsHidden()) {\n      resume = playing\n      return stopTimer()\n    }\n\n    if (resume) startTimer()\n  }\n\n  function documentIsHidden(): boolean {\n    const { ownerDocument } = emblaApi.internalEngine()\n    return ownerDocument.visibilityState === 'hidden'\n  }\n\n  function play(jumpOverride?: boolean): void {\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride\n    resume = true\n    startTimer()\n  }\n\n  function stop(): void {\n    if (playing) stopTimer()\n  }\n\n  function reset(): void {\n    if (playing) play()\n  }\n\n  function isPlaying(): boolean {\n    return playing\n  }\n\n  function next(): void {\n    const { index } = emblaApi.internalEngine()\n    const nextIndex = index.clone().add(1).get()\n    const lastIndex = emblaApi.scrollSnapList().length - 1\n    const kill = options.stopOnLastSnap && nextIndex === lastIndex\n\n    if (kill) stopTimer()\n\n    if (emblaApi.canScrollNext()) {\n      emblaApi.scrollNext(jump)\n    } else {\n      emblaApi.scrollTo(0, jump)\n    }\n  }\n\n  const self: AutoplayType = {\n    name: 'autoplay',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying\n  }\n  return self\n}\n\nAutoplay.globalOptions = <AutoplayOptionsType | undefined>undefined\n\nexport default Autoplay\n"],
  "mappings": "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",
  "names": ["defaultOptions", "active", "breakpoints", "delay", "jump", "playOnInit", "stopOnFocusIn", "stopOnInteraction", "stopOnMouseEnter", "stopOnLastSnap", "rootNode", "Autoplay", "userOptions", "options", "emblaApi", "destroyed", "playing", "resume", "timer", "init", "emblaApiInstance", "optionsHandler", "mergeOptions", "optionsAtMedia", "optionsBase", "globalOptions", "allOptions", "scrollSnapList", "length", "eventStore", "ownerDocument", "internalEngine", "emblaRoot", "root", "container", "containerNode", "on", "stopTimer", "startTimer", "add", "visibilityChange", "documentIsHidden", "destroy", "off", "emit", "ownerWindow", "clearInterval", "setInterval", "next", "visibilityState", "play", "jumpOverride", "stop", "reset", "isPlaying", "index", "nextIndex", "clone", "get", "lastIndex", "kill", "canScrollNext", "scrollNext", "scrollTo", "self", "name", "undefined"]
}
